age1 <- study2[study2$age==1,]
age2 <- study2[study2$age==2,]
age3 <- study2[study2$age==3,]
plot(incom ~ educ, age1)
plot(incom ~ educ, age2)
plot(incom ~ educ, age3)
contrasts(age1$educ) = cbind(lin = c(-1, 0, 1), quad = c(1, -2, 1))
lm11 <- lm(incom ~ educ, data = age1)
summary(lm11)
contrasts(age1$educ) = cbind(lin = c(-1, -1, 2), quad = c(1, -1, 0))
lm11 <- lm(incom ~ educ, data = age1)
summary(lm11)
contrasts(age2$educ) = cbind(lin = c(-1, 0, 1), quad = c(1, -2, 1))
lm12 <- lm(incom ~ educ, data = age2)
summary(lm12)
contrasts(age3$educ) = cbind(lin = c(-1, 0, 1), quad = c(1, -2, 1))
lm13 <- lm(incom ~ educ, data = age3)
summary(lm13)
contrasts(age1$educ) = cbind(lin = c(-1, 0, 1), quad = c(1, -2, 1))
lm11 <- lm(incom ~ educ, data = age1)
summary(lm11) # ns
summary(lm12) # sig lin
summary(lm13) # marg sig lin
with(study2, cor.test(quality, incom))
aov_sex <- with(study1, aov(vocabsize ~ time0 * sex))
study1 <- read.csv("http://www.stanford.edu/class/psych252/data/vocab0.csv")
# make sex a factor, rename the levels
study1$sex <- as.factor(study1$sex)
levels(study1$sex) <- c("male", "female")
# make time a factor
study1$time0 <- as.factor(study1$time0)
levels(study1$time0) <- c("18m", "21m", "24m", "30m")
#rename var vocabsize to make it easier to remember for me
study1$vocabsize <- study1$wordsprod
```
Create plots:
```{r 1plot1}
library(ggplot2)
# interaction plot:
with(study1, interaction.plot(time0, sex, vocabsize))
aov_sex <- with(study1, aov(vocabsize ~ time0 * sex))
summary(aov_sex)
p6 <- with(study2, interaction.plot(train, educ, quality))
library(ggplot2)
study2 <- read.csv("http://www.stanford.edu/class/psych252/data/couples1.csv")
head(study2)
study2$age <- as.factor(study2$age)
study2$educ <- as.factor(study2$educ)
study2$train <- as.factor(study2$train)
study2$counsel <- as.factor(study2$counsel)
study2$counrep <- as.factor(study2$counrep)
summary(study2)
str(study2)
p5 <- ggplot(study2, aes(train, quality))
p5 + geom_boxplot(aes(fill = educ))
p6 <- with(study2, interaction.plot(train, educ, quality))
head(study1)
contrasts(study1$time0) = dummy
contrasts(study1$time0) = dummy
1
dummy = cbind(c(0, 1, 0, 0), c(0, 0, 1, 0), c(0, 0, 0, 1))
lm2_1 = lm(vocabsize ~ time0 * sex, data = study1) # interactive
summary(lm2_1)
lm_1 = lm(vocabsize ~ time0 + sex, data = study1) # additive
summary(lm_1)
anova(lm_1, lm2_1)
anova(lm, lm_1)
accel = c(-1, -1, 1, 1) # test whether time1 and 2 are different from time3 and 4
accel12 = c(-1, 1, 0, 0) # test whether time1 and 2 are different from each other
accel34 = c(0, 0, -1, 1) # test whether time3 and 4 are different from each other
lm = lm(vocabsize ~ time0 + sex, data = study1) # additive
summary(lm)
anova(lm, lm_1)
bartlett.test(vocabsize ~ time0, data = study1)
bartlett.test(vocabsize ~ sex, data = study1)
aov_sex0 <- with(study1, oneway.test(vocabsize ~ sex, var.equal = TRUE))
summary(aov_sex)
summary(aov_sex0)
with(study2, interaction.plot(counsel, age, quality))
with(study2, interaction.plot(counsel, educ, quality))
aov2 <- with(study2, aov(quality ~ counsel * age * educ))
summary(aov2)
aov3 <- with(study2, aov(quality ~ educ))
summary(aov3)
bartlett.test(quality ~ counsel * age, data = study2)
bartlett.test(quality ~ train * age * educ, data = study2)
with(study1, coplot(vocabsize ~ time0 | sex))
with(study2, coplot(incom ~ quality | age))
with(study2, coplot(incom ~ quality | educ))
with(study2, interaction.plot(age, educ, incom))
with(study2, interaction.plot(educ, age, incom))
p12 <- ggplot(study2, aes(x = quality, y = incom, group = educ, colour = educ))
p12 + geom_point() + geom_smooth(method = "lm", se = FALSE)
p13 <- ggplot(study2, aes(x=quality, y=incom))
p13 + geom_point() + geom_smooth(method = "lm", se = FALSE)
library(psych)
partial.r(study2, quality, income)
dataC = read.csv("http://www.stanford.edu/class/psych252/_downloads/lifesatis.csv")
head(dataC)
with(study1, interaction.plot(time0, sex, vocabsize))
study2_0 <- read.table("http://www.stanford.edu/class/psych252/data/couples5.txt")
View(study2_0)
View(study2)
rm(list = ls())
setwd("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/")
source("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/R_scripts/useful.R")
source("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/R_scripts/et_helper.R")
d <- read.csv("processed_data/simpimp_processed.csv")
d <- read.csv("processed_data/simpimp_processed.csv")
d <- subset(d,stimulus != "blank") # remove fixation cross
d$stimulus <- to.n(d$stimulus) # convert to numeric
head(d)
order <- read.csv("info/simpimp_order.csv")
nrow(d) # first check number of rows
plot(d$stimulus) # now check the stimulus ordering
head(d$stimulus)
tail(d$stimulus)
summary(d$stimulus)
str(d$stimulus)
d <- join(d, order) # use join rather than merge because it doesn't sort
plot(d$stimulus) # check that nothing got messed up
nrow(d) # check the number of rows again
head(d)
rois <- list()
rois[[1]] <- c(0,0,840,550) # left
rois[[2]] <- c(840,0,840,550) # right
rois[[3]] <- c(420,550,840,550) # center
names(rois) <- c("L","R","C")
roi.image(rois)
d$roi <- roi.check(d,rois)
qplot(roi,data=d)
d$correct <- d$roi == d$targ.pos
d$correct <- d$roi == d$targPos
d$correct <- d$roi == d$targetPos
d <- rezero.trials(d)
subsample.hz <- 10 # 10 hz is decent, eventually we should set to 30 or 60 hz
d$t.crit.binned <- round(d$t.crit*subsample.hz)/subsample.hz # subsample step
d$t.crit.binned <- round(d$t.stim*subsample.hz)/subsample.hz # subsample step
d$t.stim.binned <- round(d$t.stim*subsample.hz)/subsample.hz # subsample step ; EY: CHANGED THIS TO t.stim
ms <- aggregate(correct ~ t.stim.binned + trial.type, d, mean)
ms <- aggregate(correct ~ t.stim.binned + trialType, d, mean)
View(d)
rm(list = ls())
rm(list = ls())
setwd("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/")
source("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/R_scripts/useful.R")
source("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/R_scripts/et_helper.R")
d <- read.csv("processed_data/simpimp_processed.csv")
d <- subset(d,stimulus != "blank") # remove blanks
order <- read.csv("info/simpimp_order.csv")
nrow(d) # first check number of rows
plot(d$stimulus) # now check the stimulus ordering
d <- join(d, order) # use join rather than merge because it doesn't sort
nrow(d) # check the number of rows again
rois <- list()
rois[[1]] <- c(0,0,840,550) # left
rois[[2]] <- c(840,0,840,550) # right
rois[[3]] <- c(420,550,840,550) # center
names(rois) <- c("L","R","C")
roi.image(rois)
d$roi <- roi.check(d,rois)
qplot(roi,data=d)
d$correct <- d$roi == d$targetPos
d <- rezero.trials(d) # *** EY: COULD NOT GET THIS TO WORK!
subsample.hz <- 10 # 10 hz is decent, eventually we should set to 30 or 60 hz
d$t.stim.binned <- round(d$t.stim*subsample.hz)/subsample.hz # subsample step ; EY: CHANGED THIS TO t.stim
ms <- aggregate(correct ~ t.stim.binned + trialType, d, mean)
View(ms)
d$t.crit.binned <- round(d$t.stim*subsample.hz)/subsample.hz # subsample step ; EY: CHANGED THIS TO t.stim
ms <- aggregate(correct ~ t.crit.binned + trialType, d, mean)
qplot(t.stim.binned,correct,
colour=trial.type,
geom="line",
data=ms) +
geom_hline(yintercept=.33,lty=2) +
geom_vline(xintercept=0,lty=3) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0)) # make the axes start at 0
qplot(t.stim.binned,correct,
colour=trialType,
geom="line",
data=ms) +
geom_hline(yintercept=.33,lty=2) +
geom_vline(xintercept=0,lty=3) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0)) # make the axes start at 0
qplot(t.crit.binned,correct,
colour=trialType,
geom="line",
data=ms) +
geom_hline(yintercept=.33,lty=2) +
geom_vline(xintercept=0,lty=3) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0)) # make the axes start at 0
mss <- aggregate(correct ~ t.crit.binned + trial.type + subid, d, mean)
mss <- aggregate(correct ~ t.crit.binned + trialType + subid, d, mean)
ms <- aggregate(correct ~ t.crit.binned + trialType, mss, mean)
ms$cih <- aggregate(correct ~ t.crit.binned + trialType, mss, ci.high)$correct
ms$cil <- aggregate(correct ~ t.crit.binned + trialType, mss, ci.low)$correct
qplot(t.crit.binned,correct,
colour=trialType,
geom="line",
data=ms) +
geom_pointrange(aes(ymin=correct-cil, ymax=correct+cih),
position=position_dodge(.05)) +
geom_hline(yintercept=.33,lty=2) +
geom_vline(xintercept=0,lty=3) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0)) # make the axes start at 0
ms <- aggregate(correct ~ t.crit.binned + trialType + item, d, mean)
ms <- aggregate(correct ~ t.crit.binned + trialType + target, d, mean)
qplot(t.crit.binned,correct,
colour=trial.type, facets=~item,
geom="line",
data=ms) +
geom_hline(yintercept=.33,lty=2) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0))
qplot(t.crit.binned,correct,
colour=trialType, facets=~target,
geom="line",
data=ms) +
geom_hline(yintercept=.33,lty=2) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0))
window <- c(.5,2.5)
mss <- aggregate(correct ~ trialType + subid,
subset(d,t.crit.binned > window[1] & t.crit.binned < window[2]),
mean)
ms <- aggregate(correct ~ trialType, mss, mean)
ms$cih <- aggregate(correct ~ trialType, mss, ci.high)$correct
ms$cil <- aggregate(correct ~ trialType, mss, ci.low)$correct
qplot(trialType,correct,
fill=trialType, stat="identity",
geom="bar",ylim=c(0,1),
data=ms) +
ylab("Proportion correct looking") +
geom_hline(yintercept=.33,lty=2) +
geom_errorbar(aes(ymin=correct-cil,ymax=correct+cih,width=.2))
View(d)
rezero.trials <- function (d,onset.name="target.onset") {
ddply(d,.(stimulus,subid), function(x) {
x$t.crit <- x$t.stim - x[,onset.name]
return(x)
})
}
roi.image <- function (rois,y.max=1050,x.max=1680) {
plot(NA,xlim=c(0,x.max),ylim=c(0,y.max),bty="n",xlab="x",ylab="y")
for (i in 1:length(rois)) {
r <- rois[[i]]
rect(r[1], r[2], r[1] + r[3], r[2] + r[4])
text(r[1] + r[3]/2,
r[2] + r[4]/2,
names(rois)[i])
}
}
roi.check <- function (d, rois) {
roi <- factor(NA,levels=names(rois))
for (i in 1:length(rois)) {
r <- rois[[i]]
roi[d$x > r[1] & d$x < r[1] + r[3] &
d$y > r[2] & d$y < r[2] + r[4]] <- names(rois)[i]
}
return(roi)
}
preprocess.data <- function(d,
x.max = 1680, y.max=1050,
samp.rate = 120,
avg.eyes=TRUE) {
## drop the .jpg from the stimulus
d$stimulus <- str_replace(d$stimulus,pattern=".jpg",replacement="")
## average the eyes
if (avg.eyes) {
# round to the nearest pixel
d$x <- round(rowMeans(d[,c("lx","rx")], na.rm=TRUE))
d$y <- round(rowMeans(d[,c("ly","ry")], na.rm=TRUE))
d <- d[, !(names(d) %in% c("lx","rx","ly","ry"))]
}
## clip off out of range numbers
d$x[d$x < 0 | d$x > x.max] <- NA
d$y[d$y < 0 | d$y > y.max] <- NA
## convert the time into seconds
d$t <- round((d$t - d$t[1])/(1000000), 3)
ms.increment <- c(0, diff(d$t))
## add a column of times for each video segment
## note this code makes me somewhat ashamed; it's slow and it abuses the R namespace
## because it's basically a for loop. but I don't know how to fix it. -mcf
stim.change <- c(diff(as.numeric(factor(d$stimulus))) != 0,0)
dt <- c(diff(d$t),0)
t <- 0
d$t.stim <- mapply(function (x,y) {
if(x==TRUE) { # if stimulus changes
t <<- 0 # reset counter
return(t)
} else { # if stimulus is the same
t <<- t + y # increment counter
return(t)
}},stim.change,dt)
## round to the nearest sample
d$t.stim <- round(d$t.stim*samp.rate)/samp.rate
## y flip (so origin is cartesian, not matrix (bottom left, instead of top left)
d$y <- y.max - d$y
## finished
return (d)
}
read.smi.idf <- function (file.name, header.rows=38, suffix.len=4) {
## read the header from the file to paste back into the new file
header <- scan(file.name, what = character(),
nlines=header.rows, sep="\n", quiet=TRUE)
## DATA CLEANING
# read in data and get rid of header rows
all.d <- read.table(file.name, sep="\t",
header=T, fill=T, comment.char="", skip=header.rows)
## split data into messages and data
## First get data:
d <- subset(all.d, all.d$Type=="SMP")
d$lx <- to.n(d$"L.POR.X..px.")
d$rx <- to.n(d$"R.POR.X..px.")
d$ly <- to.n(d$"L.POR.Y..px.")
d$ry <- to.n(d$"R.POR.Y..px.")
#clean up d
d <- d[,c("Time","lx","ly","rx", "ry")]
names(d)[1] <- "t"
## Now get "messages" - about the stimulus that's being presented
msgs <- subset(all.d,all.d$Type=="MSG")
msgs <- msgs[,c("Time","L.POR.X..px.")]
names(msgs) <- c("Time","Message")
msgs$Message <- as.character(msgs$Message)
msgs$Stimulus <- gsub("# Message: ", "",msgs$Message)
## merge stimulus information back into d frame as a column
d$stimulus <- sapply(d$t,
function(x) {
set <- msgs$Stimulus[msgs$Time < x]
set[length(set)]
})
d$stimulus <- as.character(d$stimulus)
## drop the times before the first video
d <- d[grep(".",d$stimulus,fixed=TRUE),]
## remove (now wrong) row names
row.names(d)<-NULL
return(d)
}
rois <- list()
rois[[1]] <- c(0,0,840,550) # left
rois[[2]] <- c(840,0,840,550) # right
rois[[3]] <- c(420,550,840,550) # center
names(rois) <- c("L","R","C")
roi.image(rois)
d$roi <- roi.check(d,rois)
qplot(roi,data=d)
d <- rezero.trials(d) # *** EY: COULD NOT GET THIS TO WORK!
rezero.trials <- function (d,onset.name="target.onset") {
ddply(d,.(stimulus,subid), function(x) {
x$t.crit <- x$t.stim - x[,targetOnset]
return(x)
})
}
d <- rezero.trials(d) # *** EY: COULD NOT GET THIS TO WORK!
setwd("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/")
source("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/R_scripts/useful.R")
source("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/R_scripts/et_helper.R")
d <- read.csv("processed_data/simpimp_processed.csv")
head(d)
d <- subset(d,stimulus != "blank") # remove blanks
order <- read.csv("info/simpimp_order.csv")
nrow(d) # first check number of rows
plot(d$stimulus) # now check the stimulus ordering
d <- join(d, order) # use join rather than merge because it doesn't sort
plot(d$stimulus) # check that nothing got messed up
nrow(d) # check the number of rows again
rois <- list()
rois[[1]] <- c(0,0,840,550) # left
rois[[2]] <- c(840,0,840,550) # right
rois[[3]] <- c(420,550,840,550) # center
names(rois) <- c("L","R","C")
roi.image(rois)
d$roi <- roi.check(d,rois)
qplot(roi,data=d)
d$correct <- d$roi == d$targetPos
d <- rezero.trials(d) # *** EY: COULD NOT GET THIS TO WORK!
subsample.hz <- 10 # 10 hz is decent, eventually we should set to 30 or 60 hz
d$t.crit.binned <- round(d$t.crit*subsample.hz)/subsample.hz # subsample step ; EY: CHANGED THIS TO t.stim
ms <- aggregate(correct ~ t.crit.binned + trialType, d, mean)
qplot(t.crit.binned,correct,
colour=trialType,
geom="line",
data=ms) +
geom_hline(yintercept=.33,lty=2) +
geom_vline(xintercept=0,lty=3) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0))
mss <- aggregate(correct ~ t.crit.binned + trialType + subid, d, mean)
ms <- aggregate(correct ~ t.crit.binned + trialType, mss, mean)
ms$cih <- aggregate(correct ~ t.crit.binned + trialType, mss, ci.high)$correct
ms$cil <- aggregate(correct ~ t.crit.binned + trialType, mss, ci.low)$correct
qplot(t.crit.binned,correct,
colour=trialType,
geom="line",
data=ms) +
geom_pointrange(aes(ymin=correct-cil, ymax=correct+cih),
position=position_dodge(.05)) +
geom_hline(yintercept=.33,lty=2) +
geom_vline(xintercept=0,lty=3) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0)) # make the axes start at 0
ms <- aggregate(correct ~ t.crit.binned + trialType + target, d, mean)
qplot(t.crit.binned,correct,
colour=trialType, facets=~target,
geom="line",
data=ms) +
geom_hline(yintercept=.33,lty=2) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0))
window <- c(.5,2.5)
mss <- aggregate(correct ~ trialType + subid,
subset(d,t.crit.binned > window[1] & t.crit.binned < window[2]),
mean)
ms <- aggregate(correct ~ trialType, mss, mean)
ms$cih <- aggregate(correct ~ trialType, mss, ci.high)$correct
ms$cil <- aggregate(correct ~ trialType, mss, ci.low)$correct
qplot(trialType,correct,
fill=trialType, stat="identity",
geom="bar",ylim=c(0,1),
data=ms) +
ylab("Proportion correct looking") +
geom_hline(yintercept=.33,lty=2) +
geom_errorbar(aes(ymin=correct-cil,ymax=correct+cih,width=.2))
rm(list = ls())
setwd("/Users/ericang/Documents/Erica/Stanford/2013-Q2-Winter/Research/simpimpGIT/Data_analysis/")
source("R_scripts/useful.R")
source("R_scripts/et_helper.R")
d <- read.csv("processed_data/simpimp_processed.csv")
View(d)
d <- read.csv("processed_data/simpimp_processed.csv")
hist(d$x)
hist(d$y)
hist(d$x)
# break down by subject
# HINT: use facets!
qplot(x,
facets = ~ subid,
geom="histogram",
data=d)
qplot(y,
facets = ~ subid,
geom="histogram",
data=d)
qplot(x,y,data=d, facets=~subid)
qplot(x,y,data=subset(d,stimulus=="140121-ey-simpleImp-list1.042"), facets=~subid)
qplot(x,y,data=subset(d,stimulus=="140121-ey-simpleImp-list1.024"), facets=~subid)
qplot(x,y,data=subset(d,stimulus=="140121-ey-simpleImp-list1.035"), facets=~subid)
qplot(x,y,data=subset(d,stimulus=="140121-ey-simpleImp-list1.032"), facets=~subid)
qplot(x,y,geom="density2d",
data=d,
xlim=c(0,1680),ylim=c(0,1050), facets=~subid)
qplot(x,y,
facets = ~ subid,
geom="density2d",
data=subset(d,stimulus=="140121-ey-simpleImp-list1.011"),
xlim=c(0,1680),
ylim=c(0,1050))
qplot(x,y,
facets = ~ subid,
geom="density2d",
data=subset(d,stimulus=="140121-ey-simpleImp-list1.032"),
xlim=c(0,1680),
ylim=c(0,1050))
plot(x,y,data=subset(d,stimulus!="blank"))
qplot(x,y,data=subset(d,stimulus!="blank")) # what's going on here?
qplot(x,y,
facets = ~ subid,
geom="density2d",
data=subset(d,stimulus!="blank"),
xlim=c(0,1680),
ylim=c(0,1050))
sum(is.na(d$x))
aggregate(x ~ subid, d, function(y) {return(sum(is.na(y)))},
na.action="na.pass")
plot(d$stimulus) # now check the stimulus ordering
roi.image(rois)
rois <- list()
rois[[1]] <- c(0,0,840,550) # left
rois[[2]] <- c(840,0,840,550) # right
rois[[3]] <- c(420,550,840,550) # center
names(rois) <- c("L","R","C")
roi.image(rois)
d$roi <- roi.check(d,rois)
qplot(roi,data=d)
fix(rois)
ms <- aggregate(correct ~ t.crit.binned + trialType, d, mean)
qplot(t.crit.binned,correct,
colour=trialType,
geom="line",
data=ms) +
geom_hline(yintercept=.33,lty=2) +
geom_vline(xintercept=0,lty=3) +
xlab("Time (s)") + ylab("Proportion correct looking") +
scale_x_continuous(limits=c(-2,3),expand = c(0,0)) +
scale_y_continuous(limits=c(0,1),expand = c(0,0))
subsample.hz <- 10 # 10 hz is decent, eventually we should set to 30 or 60 hz
d$t.crit.binned <- round(d$t.crit*subsample.hz)/subsample.hz # subsample step
d <- rezero.trials(d) # specified in et_helper.R
d$correct <- d$roi == d$targetPos
